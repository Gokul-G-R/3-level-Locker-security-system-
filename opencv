import cv2
import numpy as np
import face_recognition
import serial
import time

# Serial port configuration (adjust the port and baud rate as needed)
ser = serial.Serial('COM3', 9600, timeout=1)

# Load the known images and their encodings
known_face_encodings = []
known_face_names = []

# Load the first person's image
person1_image = face_recognition.load_image_file("photo1.jpg")
person1_encoding = face_recognition.face_encodings(person1_image)[0]
known_face_encodings.append(person1_encoding)
known_face_names.append("Name1")

# Load the second person's image
person2_image = face_recognition.load_image_file("photo2.jpg")
person2_encoding = face_recognition.face_encodings(person2_image)[0]
known_face_encodings.append(person2_encoding)
known_face_names.append("Name2")

# Load the third person's image
person3_image = face_recognition.load_image_file("photo3.jpg")
person3_encoding = face_recognition.face_encodings(person3_image)[0]
known_face_encodings.append(person3_encoding)
known_face_names.append("Name3")

# Initialize variables for texture analysis
prev_face_encoding = None
num_consecutive_matches = 0
match_threshold = 0.5  # Adjust as needed
max_consecutive_matches = 5

# Open webcam
video_capture = cv2.VideoCapture(0)

# Variable to track the time when the face was recognized
face_recognition_time = None

while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()

    # Find all face locations and encodings
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    for face_encoding in face_encodings:
        # Compare the face with the known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=match_threshold)
        name = "Unknown"

        for i, match in enumerate(matches):
            if match:
                name = known_face_names[i]
                if prev_face_encoding is not None:
                    distance = np.linalg.norm(np.array(face_encoding) - np.array(prev_face_encoding))
                    if distance < match_threshold:
                        num_consecutive_matches += 1
                        if num_consecutive_matches >= max_consecutive_matches:
                            # Record the time when the face was recognized
                            if face_recognition_time is None:
                                face_recognition_time = time.time()

                            # Send signal to Arduino to turn on LED
                            ser.write(b'1')
                    else:
                        num_consecutive_matches = 0
                prev_face_encoding = face_encoding

        # Display the name on the frame
        cv2.putText(frame, name, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the resulting image
    cv2.imshow('Video', frame)

    # Check if 5 seconds have passed since the face was recognized
    if face_recognition_time is not None and time.time() - face_recognition_time >= 5:
        # Send signal to Arduino to turn off LED
        ser.write(b'0')
        break  # Terminate the face recognition

    # Exit loop on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release webcam and close all windows
video_capture.release()
cv2.destroyAllWindows()
